# -*- coding: utf-8 -*-
"""Preprocessing4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ERiN4pThw0r-b8IRQNh_KLmAF9KYU4K
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('Data.csv')
x = dataset. iloc[:, :-1].values
y = dataset.iloc[:, -1].values

print(x)

"""[:, :-1] pilih semua baris dalam dataset, serta semua kolom
kecuali kolom terakhir(LABEL).
"""

print(y)

"""[:, -1]  pilih semua baris, kolom terakhir.   PRINT DATA LABEL"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer (missing_values=np.nan, strategy='mean')
imputer.fit(x[:, 1:3])
x[:, 1:3] = imputer.transform(x[:, 1:3])

print(x)

"""Menambahkan library sklearn
• Class SimpleImputer() digunakan untuk mengganti nilai yang
kosong dengan mean kolom.
• missing_values : nilai data yang digunakan sebagai
penanda bahwa nilai aslinya tidak ada (missing); dalam hal
ini NaN (np.nan)
• strategy : dalam hal ini rata-rata kolom ('mean'), bisa juga
menggunakan 'median', 'most_frequent' (modus),
atau 'constant’.
• Selanjutnya obyek imputer harus di fit berdasarkan kolom yang
bersangkutan menggunakan metode fit()
"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder' , OneHotEncoder (), [0])], remainder='passthrough')
x = np.array(ct. fit_transform(x))

"""matrik x sebelumnya pada Kota bertype string, jadi diubah ke (int atau float). """

print(x)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

print(y)

"""Matrik Y hanya akan diubah menjadi numerik(0, 1 , dan seterusnya) dengan LabelEncoder.

"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)

print(x_test)

"""Test_size : Proporsi test set, dalam hal ini 0.2"""

print(y_test)

print(y_train)

"""Train_size : Proporsi train size. jika tidak di set, maka akan menyesuaikan dengan test size (dalam kasus ini 0.8). Berlaku kebalikannya."""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train[:, 4:] = sc.fit_transform(x_train[:, 4:])
x_test[:, 4:] = sc.transform(x_test[:, 4:])

"""StandarScaler menghilangkan mean (terpusat pada 0) dan menskalakan ke variansi (deviasi standar = 1)."""

print(x_test)

print(x_train)